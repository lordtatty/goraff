// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	goraff "github.com/lordtatty/goraff"
	mock "github.com/stretchr/testify/mock"
)

// ChangeNotifier is an autogenerated mock type for the ChangeNotifier type
type ChangeNotifier struct {
	mock.Mock
}

type ChangeNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *ChangeNotifier) EXPECT() *ChangeNotifier_Expecter {
	return &ChangeNotifier_Expecter{mock: &_m.Mock}
}

// Notify provides a mock function with given fields: notification
func (_m *ChangeNotifier) Notify(notification goraff.StateChangeNotification) {
	_m.Called(notification)
}

// ChangeNotifier_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type ChangeNotifier_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - notification goraff.StateChangeNotification
func (_e *ChangeNotifier_Expecter) Notify(notification interface{}) *ChangeNotifier_Notify_Call {
	return &ChangeNotifier_Notify_Call{Call: _e.mock.On("Notify", notification)}
}

func (_c *ChangeNotifier_Notify_Call) Run(run func(notification goraff.StateChangeNotification)) *ChangeNotifier_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(goraff.StateChangeNotification))
	})
	return _c
}

func (_c *ChangeNotifier_Notify_Call) Return() *ChangeNotifier_Notify_Call {
	_c.Call.Return()
	return _c
}

func (_c *ChangeNotifier_Notify_Call) RunAndReturn(run func(goraff.StateChangeNotification)) *ChangeNotifier_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// NewChangeNotifier creates a new instance of ChangeNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChangeNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChangeNotifier {
	mock := &ChangeNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
