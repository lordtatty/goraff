// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	goraff "github.com/lordtatty/goraff"
	mock "github.com/stretchr/testify/mock"
)

// FollowIf is an autogenerated mock type for the FollowIf type
type FollowIf struct {
	mock.Mock
}

type FollowIf_Expecter struct {
	mock *mock.Mock
}

func (_m *FollowIf) EXPECT() *FollowIf_Expecter {
	return &FollowIf_Expecter{mock: &_m.Mock}
}

// Match provides a mock function with given fields: s
func (_m *FollowIf) Match(s *goraff.ReadableGraph) (bool, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*goraff.ReadableGraph) (bool, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(*goraff.ReadableGraph) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*goraff.ReadableGraph) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowIf_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type FollowIf_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - s *goraff.ReadableGraph
func (_e *FollowIf_Expecter) Match(s interface{}) *FollowIf_Match_Call {
	return &FollowIf_Match_Call{Call: _e.mock.On("Match", s)}
}

func (_c *FollowIf_Match_Call) Run(run func(s *goraff.ReadableGraph)) *FollowIf_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*goraff.ReadableGraph))
	})
	return _c
}

func (_c *FollowIf_Match_Call) Return(_a0 bool, _a1 error) *FollowIf_Match_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowIf_Match_Call) RunAndReturn(run func(*goraff.ReadableGraph) (bool, error)) *FollowIf_Match_Call {
	_c.Call.Return(run)
	return _c
}

// NewFollowIf creates a new instance of FollowIf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFollowIf(t interface {
	mock.TestingT
	Cleanup(func())
}) *FollowIf {
	mock := &FollowIf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
