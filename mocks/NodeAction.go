// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	goraff "github.com/lordtatty/goraff"
	mock "github.com/stretchr/testify/mock"
)

// NodeAction is an autogenerated mock type for the NodeAction type
type NodeAction struct {
	mock.Mock
}

type NodeAction_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeAction) EXPECT() *NodeAction_Expecter {
	return &NodeAction_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: s, r, triggeringNodeID
func (_m *NodeAction) Do(s *goraff.NodeState, r *goraff.StateReadOnly, triggeringNodeID string) error {
	ret := _m.Called(s, r, triggeringNodeID)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*goraff.NodeState, *goraff.StateReadOnly, string) error); ok {
		r0 = rf(s, r, triggeringNodeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeAction_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type NodeAction_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - s *goraff.NodeState
//   - r *goraff.StateReadOnly
//   - triggeringNodeID string
func (_e *NodeAction_Expecter) Do(s interface{}, r interface{}, triggeringNodeID interface{}) *NodeAction_Do_Call {
	return &NodeAction_Do_Call{Call: _e.mock.On("Do", s, r, triggeringNodeID)}
}

func (_c *NodeAction_Do_Call) Run(run func(s *goraff.NodeState, r *goraff.StateReadOnly, triggeringNodeID string)) *NodeAction_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*goraff.NodeState), args[1].(*goraff.StateReadOnly), args[2].(string))
	})
	return _c
}

func (_c *NodeAction_Do_Call) Return(_a0 error) *NodeAction_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NodeAction_Do_Call) RunAndReturn(run func(*goraff.NodeState, *goraff.StateReadOnly, string) error) *NodeAction_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeAction creates a new instance of NodeAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeAction {
	mock := &NodeAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
