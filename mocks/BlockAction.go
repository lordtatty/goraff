// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	goraff "github.com/lordtatty/goraff"
	mock "github.com/stretchr/testify/mock"
)

// BlockAction is an autogenerated mock type for the BlockAction type
type BlockAction struct {
	mock.Mock
}

type BlockAction_Expecter struct {
	mock *mock.Mock
}

func (_m *BlockAction) EXPECT() *BlockAction_Expecter {
	return &BlockAction_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: s, r, triggeringNS
func (_m *BlockAction) Do(s *goraff.Node, r *goraff.ReadableGraph, triggeringNS *goraff.ReadableNode) error {
	ret := _m.Called(s, r, triggeringNS)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*goraff.Node, *goraff.ReadableGraph, *goraff.ReadableNode) error); ok {
		r0 = rf(s, r, triggeringNS)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockAction_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type BlockAction_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - s *goraff.Node
//   - r *goraff.ReadableGraph
//   - triggeringNS *goraff.ReadableNode
func (_e *BlockAction_Expecter) Do(s interface{}, r interface{}, triggeringNS interface{}) *BlockAction_Do_Call {
	return &BlockAction_Do_Call{Call: _e.mock.On("Do", s, r, triggeringNS)}
}

func (_c *BlockAction_Do_Call) Run(run func(s *goraff.Node, r *goraff.ReadableGraph, triggeringNS *goraff.ReadableNode)) *BlockAction_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*goraff.Node), args[1].(*goraff.ReadableGraph), args[2].(*goraff.ReadableNode))
	})
	return _c
}

func (_c *BlockAction_Do_Call) Return(_a0 error) *BlockAction_Do_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BlockAction_Do_Call) RunAndReturn(run func(*goraff.Node, *goraff.ReadableGraph, *goraff.ReadableNode) error) *BlockAction_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlockAction creates a new instance of BlockAction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockAction(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockAction {
	mock := &BlockAction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
