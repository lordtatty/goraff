// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	goraff "github.com/lordtatty/goraff"
	mock "github.com/stretchr/testify/mock"
)

// ChangeListener is an autogenerated mock type for the ChangeListener type
type ChangeListener struct {
	mock.Mock
}

type ChangeListener_Expecter struct {
	mock *mock.Mock
}

func (_m *ChangeListener) EXPECT() *ChangeListener_Expecter {
	return &ChangeListener_Expecter{mock: &_m.Mock}
}

// Listen provides a mock function with given fields: _a0
func (_m *ChangeListener) Listen(_a0 func(goraff.GraphChangeNotification)) {
	_m.Called(_a0)
}

// ChangeListener_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type ChangeListener_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - _a0 func(goraff.GraphChangeNotification)
func (_e *ChangeListener_Expecter) Listen(_a0 interface{}) *ChangeListener_Listen_Call {
	return &ChangeListener_Listen_Call{Call: _e.mock.On("Listen", _a0)}
}

func (_c *ChangeListener_Listen_Call) Run(run func(_a0 func(goraff.GraphChangeNotification))) *ChangeListener_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(goraff.GraphChangeNotification)))
	})
	return _c
}

func (_c *ChangeListener_Listen_Call) Return() *ChangeListener_Listen_Call {
	_c.Call.Return()
	return _c
}

func (_c *ChangeListener_Listen_Call) RunAndReturn(run func(func(goraff.GraphChangeNotification))) *ChangeListener_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// NewChangeListener creates a new instance of ChangeListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChangeListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChangeListener {
	mock := &ChangeListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
